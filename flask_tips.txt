sudo apt-get install python3-venv
 
mkdir myproject
cd myproject
python3 -m venv venv

cd myproject
. venv/bin/activate

pip install Flask


Validation:
https://nunie123.github.io/sqlalchemy-validation.html

https://www.ntu.edu.sg/home/ehchua/programming/webprogramming/Python3_Flask.html

https://flask-restful.readthedocs.io/en/latest/quickstart.html

Excellent!!!
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world
https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask
https://blog.miguelgrinberg.com/post/writing-a-javascript-rest-client
https://blog.miguelgrinberg.com/post/designing-a-restful-api-using-flask-restful

note: to complete the server install on vagrant and virtualbox I had to do:
sudo apt-get install gcc
before trying to install mysqlclient

Try this first for CORS on debian:
sudo apt-get install nginx-extras

Setting up nginx server to allow CORS which is required for $.ajax interaction:
https://distinctplace.com/2017/04/17/nginx-access-control-allow-origin-cors/

Need to compile and install a new nginx version with headers-more module:
https://www.vultr.com/docs/how-to-compile-nginx-from-source-on-ubuntu-16-04

install make first:
sudo apt-get install make

add this step for headers-more module when downloading the source codes:
wget https://github.com/openresty/headers-more-nginx-module/archive/v0.33.tar.gz && tar xzvf v0.33.tar.gz

follow above directions, but I had to use the following ./configure args in order for it to install:



nginx compile configure arguments from current vagrant/virtualbox nnging 1.10.3:
./configure \
--with-cc-opt='-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2' \
--with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now' \
--prefix=/usr/share/nginx \
--sbin-path=/usr/sbin/nginx \
--modules-path=/usr/lib/nginx/modules \
--conf-path=/etc/nginx/nginx.conf \
--http-log-path=/var/log/nginx/access.log \
--error-log-path=/var/log/nginx/error.log \
--lock-path=/var/lock/nginx.lock \
--pid-path=/run/nginx.pid \
--user=www-data \
--group=www-data \
--build=Ubuntu \
--http-client-body-temp-path=/var/lib/nginx/body \
--http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
--http-proxy-temp-path=/var/lib/nginx/proxy \
--http-scgi-temp-path=/var/lib/nginx/scgi \
--http-uwsgi-temp-path=/var/lib/nginx/uwsgi \
--with-debug \
--with-http_ssl_module \
--with-http_stub_status_module \
--with-http_realip_module \
--with-http_auth_request_module \
--with-http_addition_module \
--with-http_dav_module \
--with-http_flv_module \
--with-http_gunzip_module \
--with-http_gzip_static_module \
--with-http_mp4_module \
--with-http_random_index_module \
--with-http_slice_module \
--with-http_ssl_module \
--with-http_stub_status_module \
--with-http_v2_module \
--with-http_sub_module \
--with-http_secure_link_module \
--with-stream \
--with-stream_ssl_module \
--with-stream_ssl_preread_module \
--with-mail \
--with-mail_ssl_module \
--with-threads \
--with-openssl=../openssl-1.1.0f \
--with-openssl-opt=enable-ec_nistp_64_gcc_128 \
--with-openssl-opt=no-nextprotoneg \
--with-openssl-opt=no-weak-ssl-ciphers \
--with-openssl-opt=no-ssl3 \
--with-pcre \
--with-pcre-jit \
--add-module=../headers-more-nginx-module-0.33

To make sure that nginx can access the libpcre.so.1 library:
sudo ldconfig


--
